close all;
clear;
clc;

addpath('../datasets');
addpath('../datasets/augmented_dataset_linscale');
addpath('../back_projections');

if ~exist('../preprocessed', 'dir')
    mkdir('../preprocessed/');
end
if ~exist('../preprocessed/gt', 'dir')
    mkdir('../preprocessed/gt/');
end
if ~exist('../preprocessed/bp', 'dir')
    mkdir('../preprocessed/bp/');
end

%filenames = dir(fullfile('../datasets/augmented_dataset_linscale', '*fits'));
%process(filenames, '../preprocessed/gt/');

filenames = dir(fullfile('../back_projections', '*fits'));
process(filenames, '../preprocessed/bp/');

function process(filenames, savepath)
    %% Iterate over all images in set
    parfor  i = 1 : numel(filenames)
        %% Read gt and bp previously generated by gen_set.m
        im = fitsread(filenames(i).name);

        %% Pre-processing
        %perform sigma-clipping
        im = sigma_clip(im);
        
        %more preprocessing here

        %% Write preprocessed files ready for training
        fitswrite(im, [savepath filenames(i).name]);
    end
end

function A_norm = normalise(A)
A_norm = (A-min(A(:))) ./ (max(A(:)-min(A(:))));
A_norm(isnan(A_norm)) = 0;
end

%sigma-clipping: remove all pixels that don't fall into the range [mean-stddev*a, mean+stddev*a]
function im = sigma_clip(im)
m = sum(im(:))/numel(im(:));
sigma = std(im); %std is a native matlab function
a = 5; %Choose value which works best

im(im<(m-sigma*a)) = 0;
%im(im>(m+sigma*a)) = 0;
end

