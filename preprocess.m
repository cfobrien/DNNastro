close all;
clear;
clc;

addpath('../datasets');
addpath('../datasets/augmented_dataset_linscale');

if ~exist('../preprocessed', 'dir')
    mkdir('../preprocessed/');
end
if ~exist('../preprocessed/gt', 'dir')
    mkdir('../preprocessed/gt/');
end
if ~exist('../preprocessed/bp', 'dir')
    mkdir('../preprocessed/bp/');
end



gt_filenames = dir(fullfile('../datasets/augmented_dataset_linscale', '*fits'));
bp_filenames = dir(fullfile('../back_projections', '*fits'));

%% Iterate over all images in set
parfor  i = 1 : numel(gt_filenames)
    %% Read gt and bp previously generated by gen_set.m
    filename = gt_filenames(i).name;
    gt = fitsread(filename);
    
    filename = bp_filenames(i).name;
    bp = fitsread(filename);
    
    %% Pre-processing
    %perform sigma-clipping
    gt = sigma_clip(gt);
    bp = sigma_clip(bp);
    
    %more preprocessing here
    
    %% Write preprocessed files ready for training
    fitswrite(gt, ['../preprocessed/gt/' filename]);
    fitswrite(gt, ['../preprocessed/bp/' filename]);
    
end

function A_norm = normalise(A)
A_norm = (A-min(A(:))) ./ (max(A(:)-min(A(:))));
A_norm(isnan(A_norm)) = 0;
end

%sigma-clipping: remove all pixels that don't fall into the range [mean-stddev*a, mean+stddev*a]
function im = sigma_clip(im)
m = sum(im(:))/numel(im(:));
sigma = std(im); %std is a native matlab function
a = 3; %Choose value which works best

im(im<(m-sigma*a)) = 0;
%im(im>(m+sigma*a)) = 0;
end

